{"version":3,"sources":["weather.js"],"names":["COORDS_LS","API_KEY","weatherDOM","document","querySelector","cityDOM","getWeather","lat","lon","fetch","then","response","json","temperature","main","temp","place","name","innerText","saveCoords","coordsObj","console","log","localStorage","setItem","JSON","stringify","handleGeoSucces","position","latitude","coords","longitude","handleGeoError","error","askForCoords","navigator","geolocation","getCurrentPosition","loadCoords","loadedCoords","getItem","parseCoords","parse","init"],"mappings":";AAAA,IAAMA,EAAY,SACZC,EAAU,mCAEVC,EAAaC,SAASC,cAAc,eACpCC,EAAUF,SAASC,cAAc,YACjCE,EAAa,SAACC,EAAKC,GACxBC,MAAyEF,mEAAAA,OAAAA,EAAWC,SAAAA,OAAAA,EAAaP,WAAAA,OAAAA,IAC/FS,KAAK,SAAUC,GACRA,OAAAA,EAASC,SAEhBF,KAAK,SAAUE,GACTC,IAAAA,EAAcD,EAAKE,KAAKC,KACxBC,EAAQJ,EAAKK,KAEnBf,EAAWgB,UAAeL,GAAAA,OAAAA,EAA1B,KACAR,EAAQa,UAAeF,GAAAA,OAAAA,MAIpBG,EAAa,SAACC,GACnBC,QAAQC,IAAIF,GACZG,aAAaC,QAAQxB,EAAWyB,KAAKC,UAAUN,KAG1CO,EAAkB,SAACC,GAClBC,IAAAA,EAAWD,EAASE,OAAOD,SAC3BE,EAAYH,EAASE,OAAOC,UAOlCZ,EALkB,CACjBU,SAAAA,EACAE,UAAAA,IAIDzB,EAAWuB,EAAUE,IAGhBC,EAAiB,SAACC,GACvBZ,QAAQC,IAAI,8BAGPY,EAAe,WACpBC,UAAUC,YAAYC,mBAAmBV,EAAiBK,IAGrDM,EAAa,WACZC,IAAAA,EAAehB,aAAaiB,QAAQxC,GACtCuC,GAAiB,OAAjBA,EACHL,QACM,CACNb,QAAQC,IAAIiB,GACNE,IAAAA,EAAchB,KAAKiB,MAAMH,GAC/BjC,EAAWmC,EAAYZ,SAAUY,EAAYV,aAIzCY,EAAO,WACZL,KAGDK","file":"weather.7ca6c005.map","sourceRoot":"..","sourcesContent":["const COORDS_LS = 'coords';\r\nconst API_KEY = '5c552a851da721b8a4ada0586b055a04';\r\n\r\nconst weatherDOM = document.querySelector('.js-weather');\r\nconst cityDOM = document.querySelector('.js-city');\r\nconst getWeather = (lat, lon) => {\r\n\tfetch(`http://api.openweathermap.org/data/2.5/weather?units=metric&lat=${lat}&lon=${lon}&appId=${API_KEY}`)\r\n\t\t.then(function (response) {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(function (json) {\r\n\t\t\tconst temperature = json.main.temp;\r\n\t\t\tconst place = json.name;\r\n\r\n\t\t\tweatherDOM.innerText = `${temperature}Â°`;\r\n\t\t\tcityDOM.innerText = `${place}`;\r\n\t\t});\r\n};\r\n\r\nconst saveCoords = (coordsObj) => {\r\n\tconsole.log(coordsObj);\r\n\tlocalStorage.setItem(COORDS_LS, JSON.stringify(coordsObj));\r\n};\r\n\r\nconst handleGeoSucces = (position) => {\r\n\tconst latitude = position.coords.latitude;\r\n\tconst longitude = position.coords.longitude;\r\n\r\n\tconst coordsObj = {\r\n\t\tlatitude,\r\n\t\tlongitude\r\n\t};\r\n\r\n\tsaveCoords(coordsObj);\r\n\tgetWeather(latitude, longitude);\r\n};\r\n\r\nconst handleGeoError = (error) => {\r\n\tconsole.log(\"Can't access geo position\");\r\n};\r\n\r\nconst askForCoords = () => {\r\n\tnavigator.geolocation.getCurrentPosition(handleGeoSucces, handleGeoError);\r\n};\r\n\r\nconst loadCoords = () => {\r\n\tconst loadedCoords = localStorage.getItem(COORDS_LS);\r\n\tif (loadedCoords === null) {\r\n\t\taskForCoords();\r\n\t} else {\r\n\t\tconsole.log(loadedCoords);\r\n\t\tconst parseCoords = JSON.parse(loadedCoords);\r\n\t\tgetWeather(parseCoords.latitude, parseCoords.longitude);\r\n\t}\r\n};\r\n\r\nconst init = () => {\r\n\tloadCoords();\r\n};\r\n\r\ninit();"]}